(gotoF
 (null_storage 0
  (null_storage-1 nil 3757874035
   ("" (skosimp) (("" (expand "length") (("" (grind) nil nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (null_storage1 0
  (null_storage1-1 nil 3757927975 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (Storage nonempty-type-eq-decl nil gotoF nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (storage_last_TCC1 0
  (storage_last_TCC1-1 nil 3757915742 ("" (subtype-tcc) nil nil) nil
   nil))
 (storage_last 0
  (storage_last-1 nil 3757915743
   ("" (skolem!)
    (("" (flatten) (("" (rewrite -1) (("" (smash) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (cdr_append_cons_TCC1 0
  (cdr_append_cons_TCC1-1 nil 3757938147 ("" (subtype-tcc) nil nil) nil
   nil))
 (cdr_append_cons 0
  (cdr_append_cons-1 nil 3757938148
   ("" (induct s)
    (("1" (skolem!)
      (("1" (expand "append") (("1" (propax) nil nil)) nil)) nil)
     ("2" (skosimp)
      (("2" (skolem!)
        (("2" (inst - "v!1") (("2" (postpone) nil nil)) nil)) nil))
      nil)
     ("3" (postpone) nil nil))
    nil)
   nil shostak))
 (nthList_TCC1 0
  (nthList_TCC1-1 nil 3757492677 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (nthList_TCC2 0
  (nthList_TCC2-1 nil 3757492677 ("" (termination-tcc) nil nil) nil
   nil))
 (nthList_length 0
  (nthList_length-1 nil 3757492679
   ("" (induct i)
    (("1" (expand "nthList")
      (("1" (expand "length") (("1" (propax) nil nil)) nil)) nil)
     ("2" (skosimp)
      (("2" (expand "nthList" +)
        (("2" (expand "length" +) (("2" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((nat_induction formula-decl nil naturalnumbers nil)
    (nthList def-decl "list[nat]" gotoF nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (nth_nthList_TCC1 0
  (nth_nthList_TCC1-1 nil 3757752730 ("" (subtype-tcc) nil nil) nil
   nil))
 (nth_nthList 0
  (nth_nthList-1 nil 3757752740
   ("" (induct n)
    (("1" (expand "nthList")
      (("1" (expand "nthList")
        (("1" (expand "nth") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skosimp)
      (("2" (expand "nthList")
        (("2" (expand nthList +)
          (("2" (expand nth +) (("2" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("3" (skolem!)
      (("3" (rewrite nthList_length) (("3" (assert) nil nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nthList_length formula-decl nil gotoF nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nthList def-decl "list[nat]" gotoF nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (expandStorage_TCC1 0
  (expandStorage_TCC1-1 nil 3757492677 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (Storage nonempty-type-eq-decl nil gotoF nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (append_id2 0
  (append_id2-1 nil 3757750891
   ("" (induct s)
    (("1" (assert)
      (("1" (expand "append") (("1" (propax) nil nil)) nil)) nil)
     ("2" (skosimp)
      (("2" (expand "append") (("2" (propax) nil nil)) nil)) nil))
    nil)
   ((list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Storage nonempty-type-eq-decl nil gotoF nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (append_length 0
  (append_length-1 nil 3757493940
   ("" (induct s1)
    (("1" (induct s2)
      (("1" (expand "append")
        (("1" (expand "length") (("1" (propax) nil nil)) nil)) nil)
       ("2" (grind) nil nil))
      nil)
     ("2" (grind) nil nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (append def-decl "list[T]" list_props nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Storage nonempty-type-eq-decl nil gotoF nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (expand_length 0
  (expand_length-1 nil 3757742141
   ("" (copy 1)
    (("" (induct s)
      (("1" (skolem!)
        (("1" (expand "expandStorage")
          (("1" (expand "length")
            (("1" (expand "nthList")
              (("1" (expand "append")
                (("1" (rewrite nthList_length) (("1" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp)
        (("2" (skolem!)
          (("2" (inst - "adress!1 - 1")
            (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Storage nonempty-type-eq-decl nil gotoF nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (expandStorage const-decl "[Storage, nat -> Storage]" gotoF nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (nthList def-decl "list[nat]" gotoF nil)
    (nthList_length formula-decl nil gotoF nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (append def-decl "list[T]" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (expand_length_sub1 0
  (expand_length_sub1-1 nil 3757923681
   ("" (skosimp)
    (("" (expand "expandStorage") (("" (rewrite -1) nil nil)) nil))
    nil)
   ((expandStorage const-decl "[Storage, nat -> Storage]" gotoF nil))
   shostak))
 (expand_length_sub2 0
  (expand_length_sub2-1 nil 3757923755
   ("" (skosimp)
    (("" (expand "expandStorage")
      (("" (grind)
        (("" (expand "nthList")
          (("" (grind)
            (("1" (rewrite append_length :dir rl)
              (("1" (assert) nil nil)) nil)
             ("2" (rewrite append_length :dir rl)
              (("2" (assert)
                (("2" (rewrite nthList_length) (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((expandStorage const-decl "[Storage, nat -> Storage]" gotoF nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nthList_length formula-decl nil gotoF nil)
    (append_length formula-decl nil gotoF nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (Storage nonempty-type-eq-decl nil gotoF nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nthList def-decl "list[nat]" gotoF nil))
   shostak))
 (expand_eq_length 0
  (expand_eq_length-1 nil 3757921880
   ("" (skolem!)
    (("" (expand "expandStorage")
      (("" (case " length(s!1) > ad!1")
        (("1" (replace -1)
          (("1" (expand "max")
            (("1" (case "length(s!1) < 1 + ad!1")
              (("1" (replace -1) (("1" (assert) nil nil)) nil)
               ("2" (replace 1) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (replace 1)
          (("2" (smash)
            (("2" (lemma expand_length_sub2)
              (("2" (inst - "s!1" "ad!1")
                (("2" (split)
                  (("1" (expand "expandStorage")
                    (("1" (assert)
                      (("1" (expand "max") (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "max") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((expandStorage const-decl "[Storage, nat -> Storage]" gotoF nil)
    (expand_length_sub2 formula-decl nil gotoF nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (Storage nonempty-type-eq-decl nil gotoF nil))
   shostak))
 (car_append1_TCC1 0
  (car_append1_TCC1-1 nil 3757750076 ("" (subtype-tcc) nil nil) nil
   nil))
 (car_append1_TCC2 0
  (car_append1_TCC2-1 nil 3757936258 ("" (subtype-tcc) nil nil) nil
   nil))
 (car_append1 0
  (car_append1-1 nil 3757750077
   ("" (skosimp)
    (("" (expand "append")
      (("" (expand "length") (("" (smash) nil nil)) nil)) nil))
    nil)
   ((append def-decl "list[T]" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (expand_adress_length 0
  (expand_adress_length-1 nil 3757937212
   ("" (skolem!)
    (("" (rewrite expand_eq_length)
      (("" (expand "max") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((expand_eq_length formula-decl nil gotoF nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (Storage nonempty-type-eq-decl nil gotoF nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (getStorage_TCC1 0
  (getStorage_TCC1-1 nil 3757492677
   ("" (induct s)
    (("1" (induct adress)
      (("1" (expand "expandStorage")
        (("1" (expand "length")
          (("1" (expand "nthList")
            (("1" (expand "nthList")
              (("1" (expand "append")
                (("1" (expand "length") (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp)
        (("2" (expand expandStorage +)
          (("2" (expand length +)
            (("2" (expand "append") (("2" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skosimp)
      (("2" (skolem!)
        (("2" (inst - "adress!1 -1")
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append def-decl "list[T]" list_props nil)
    (nthList def-decl "list[nat]" gotoF nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (expandStorage const-decl "[Storage, nat -> Storage]" gotoF nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (Storage nonempty-type-eq-decl nil gotoF nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil))
 (null_get 0
  (null_get-1 nil 3757749286
   ("" (induct n)
    (("1" (expand "getStorage")
      (("1" (expand "expandStorage")
        (("1" (expand "length")
          (("1" (expand "append") (("1" (rewrite nth_nthList) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp)
      (("2" (expand "getStorage")
        (("2" (expand "expandStorage")
          (("2" (expand "length")
            (("2" (expand "append")
              (("2" (rewrite nth_nthList)
                (("2" (rewrite nth_nthList) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth_nthList formula-decl nil gotoF nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (append def-decl "list[T]" list_props nil)
    (expandStorage const-decl "[Storage, nat -> Storage]" gotoF nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (getStorage const-decl "[Storage, nat -> nat]" gotoF nil)
    (Storage nonempty-type-eq-decl nil gotoF nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (setStorage_TCC1 0
  (setStorage_TCC1-1 nil 3757492677
   ("" (induct s)
    (("1" (induct adress)
      (("1" (skolem!)
        (("1" (assert)
          (("1" (flatten)
            (("1" (expand "expandStorage")
              (("1" (expand "length")
                (("1" (expand "nthList")
                  (("1" (expand "nthList")
                    (("1" (expand "append") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp)
        (("2" (skolem!) (("2" (flatten) (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skosimp)
      (("2" (skosimp) (("2" (assert) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pred type-eq-decl nil defined_types nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nthList def-decl "list[nat]" gotoF nil)
    (append def-decl "list[T]" list_props nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (expandStorage const-decl "[Storage, nat -> Storage]" gotoF nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Storage nonempty-type-eq-decl nil gotoF nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil))
 (setStorage_TCC2 0
  (setStorage_TCC2-1 nil 3757492677
   ("" (induct s)
    (("1" (induct adress)
      (("1" (skolem!) nil nil)
       ("2" (skosimp)
        (("2" (skosimp) (("2" (assert) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skosimp) (("2" (skosimp) (("2" (grind) nil nil)) nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (pred type-eq-decl nil defined_types nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nthList def-decl "list[nat]" gotoF nil)
    (append def-decl "list[T]" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (expandStorage const-decl "[Storage, nat -> Storage]" gotoF nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Storage nonempty-type-eq-decl nil gotoF nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil))
 (setStorage_length 0
  (setStorage_length-1 nil 3757871274
   ("" (induct ad)
    (("1" (skolem!)
      (("1" (expand "setStorage")
        (("1" (assert)
          (("1" (grind)
            (("1" (lemma null_storage1)
              (("1" (inst - "s!1")
                (("1" (prop)
                  (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (rewrite append_length :dir rl)
              (("2" (postpone) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (postpone) nil nil))
    nil)
   nil shostak))
 (setStorage_adress_length 0
  (setStorage_adress_length-1 nil 3757939035
   ("" (skolem!) (("" (postpone) nil nil)) nil) nil shostak))
 (nth_setStorage_TCC1 0
  (nth_setStorage_TCC1-1 nil 3757937586 ("" (subtype-tcc) nil nil) nil
   nil))
 (dec_TCC1 0
  (dec_TCC1-1 nil 3757736724 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Storage nonempty-type-eq-decl nil gotoF nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (getStorage const-decl "[Storage, nat -> nat]" gotoF nil))
   nil))
 (execute_step_TCC1 0
  (execute_step_TCC1-1 nil 3757610267 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Commands type-eq-decl nil gotoF nil)
    (Configuration type-eq-decl nil gotoF nil)
    (Gp type-eq-decl nil gotoF nil)
    (running? const-decl "bool" gotoF nil)
    (stop const-decl "Transition" gotoF nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (ascends_propagates 0
  (ascends_propagates-1 nil 3757612077
   ("" (skosimp)
    (("" (expand "ascends?")
      (("" (prop)
        (("" (expand "preorder_closure")
          (("" (expand "IUnion")
            (("" (skolem!)
              (("" (inst + "i!1 + 1")
                (("" (rewrite "iterate_add_one" 1)
                  (("" (expand "o ")
                    (("" (inst + "execute_step(gp!1)")
                      (("" (prop)
                        (("" (expand "step?") (("" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ascends? const-decl "bool" gotoF nil)
    (preorder_closure const-decl "(preorder?)" closure_ops "orders/")
    (iterate_add_one formula-decl nil relation_iterate "orders/")
    (pred type-eq-decl nil defined_types nil)
    (step? const-decl "bool" gotoF nil)
    (Commands type-eq-decl nil gotoF nil)
    (Configuration type-eq-decl nil gotoF nil)
    (Gp type-eq-decl nil gotoF nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (execute_step const-decl "Gp" gotoF nil)
    (running? const-decl "bool" gotoF nil)
    (O const-decl "bool" relation_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (IUnion const-decl "set[T]" indexed_sets nil))
   shostak))
 (well_founded_stop 0
  (well_founded_stop-1 nil 3757613746
   ("" (skosimp)
    (("" (expand "well_founded?")
      (("" (skosimp)
        (("" (skolem!)
          (("" (inst + "y!1")
            (("" (skolem-typepred)
              (("" (expand "ascends?")
                (("" (flatten)
                  (("" (expand "preorder_closure")
                    (("" (expand "IUnion")
                      (("" (skolem!)
                        (("" (case "i!1 = 0")
                          (("1" (replace -1)
                            (("1" (expand "iterate")
                              (("1"
                                (replace -4)
                                (("1"
                                  (expand "step?")
                                  (("1" (flatten) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "iterate_add_one[Gp]")
                            (("2" (inst - "step?" "i!1 - 1")
                              (("1"
                                (replace -1 :hide? t)
                                (("1"
                                  (expand "o ")
                                  (("1"
                                    (skosimp)
                                    (("1"
                                      (expand "step?")
                                      (("1" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_founded? const-decl "bool" orders nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IUnion const-decl "set[T]" indexed_sets nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate "orders/")
    (step? const-decl "bool" gotoF nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (O const-decl "bool" relation_props nil)
    (iterate_add_one formula-decl nil relation_iterate "orders/")
    (preorder_closure const-decl "(preorder?)" closure_ops "orders/")
    (ascends? const-decl "bool" gotoF nil)
    (Commands type-eq-decl nil gotoF nil)
    (Configuration type-eq-decl nil gotoF nil)
    (Gp type-eq-decl nil gotoF nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (well_founded_propagates 0
  (well_founded_propagates-1 nil 3757612710
   ("" (skosimp)
    (("" (expand "well_founded?")
      (("" (skosimp)
        (("" (inst - "p!1")
          (("" (prop)
            (("" (hide -3)
              (("" (skolem-typepred)
                (("" (inst + "y!1")
                  (("" (skolem-typepred)
                    (("" (inst - "x!1")
                      (("" (rewrite "ascends_propagates") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((well_founded? const-decl "bool" orders nil)
    (Commands type-eq-decl nil gotoF nil)
    (Configuration type-eq-decl nil gotoF nil)
    (Gp type-eq-decl nil gotoF nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (ascends_propagates formula-decl nil gotoF nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (execute_TCC1 0
  (execute_TCC1-1 nil 3757492677
   ("" (skolem-typepred)
    (("" (expand "restrict")
      (("" (expand "well_founded?" 1 1)
        (("" (expand "well_founded?" -1)
          (("" (skosimp)
            (("" (inst - "p!1")
              (("" (expand "extend")
                (("" (prop)
                  (("1" (hide -2)
                    (("1" (skolem-typepred)
                      (("1" (expand "extend")
                        (("1" (inst + "y!1")
                          (("1" (skolem-typepred)
                            (("1" (inst - "x!1")
                              (("1"
                                (expand "extend")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (prop) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skolem-typepred)
                      (("2" (inst + "y!1") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ascends? const-decl "bool" gotoF nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (Gp type-eq-decl nil gotoF nil)
    (Configuration type-eq-decl nil gotoF nil)
    (Commands type-eq-decl nil gotoF nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (execute_TCC2 0
  (execute_TCC2-1 nil 3757492677
   ("" (skolem-typepred)
    (("" (expand "running?") (("" (smash) nil nil)) nil)) nil)
   ((running? const-decl "bool" gotoF nil)
    (ascends? const-decl "bool" gotoF nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (Gp type-eq-decl nil gotoF nil)
    (Configuration type-eq-decl nil gotoF nil)
    (Commands type-eq-decl nil gotoF nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (execute_TCC3 0
  (execute_TCC3-1 nil 3757492677
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (use "well_founded_propagates")
        (("" (expand "execute_step") (("" (smash) nil nil)) nil)) nil))
      nil))
    nil)
   ((execute_step const-decl "Gp" gotoF nil)
    (well_founded_propagates formula-decl nil gotoF nil)
    (ascends? const-decl "bool" gotoF nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (Gp type-eq-decl nil gotoF nil)
    (Configuration type-eq-decl nil gotoF nil)
    (Commands type-eq-decl nil gotoF nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (execute_TCC4 0
  (execute_TCC4-1 nil 3757610267
   ("" (skolem-typepred)
    (("" (flatten)
      (("" (expand "restrict")
        (("" (hide -1)
          (("" (expand "ascends?")
            (("" (prop)
              (("1" (expand "preorder_closure")
                (("1" (expand "IUnion")
                  (("1" (inst + "0")
                    (("1" (expand "iterate") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "step?")
                (("2" (prop)
                  (("2" (expand "execute_step")
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IUnion const-decl "set[T]" indexed_sets nil)
    (iterate def-decl "pred[[T, T]]" relation_iterate "orders/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (preorder_closure const-decl "(preorder?)" closure_ops "orders/")
    (execute_step const-decl "Gp" gotoF nil)
    (step? const-decl "bool" gotoF nil)
    (restrict const-decl "R" restrict nil)
    (ascends? const-decl "bool" gotoF nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil)
    (Gp type-eq-decl nil gotoF nil)
    (Configuration type-eq-decl nil gotoF nil)
    (Commands type-eq-decl nil gotoF nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil))
 (inc_ne_stop 0
  (inc_ne_stop-1 nil 3757744032
   ("" (induct i)
    (("1" (expand "stop")
      (("1" (expand "inc") (("1" (postpone) nil nil)) nil)) nil)
     ("2" (postpone) nil nil))
    nil)
   nil shostak))
 (set_get_TCC1 0
  (set_get_TCC1-1 nil 3757748025 ("" (subtype-tcc) nil nil) nil nil))
 (set_get 0
  (set_get-1 nil 3757748046
   ("" (induct s)
    (("1" (induct adress)
      (("1" (expand "getStorage")
        (("1" (expand "expandStorage")
          (("1" (expand "length")
            (("1" (expand "nthList")
              (("1" (expand "nthList")
                (("1" (expand "append")
                  (("1" (expand "nth")
                    (("1" (expand "setStorage")
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skosimp)
        (("2" (expand "getStorage")
          (("2" (expand "expandStorage")
            (("2" (expand "length")
              (("2" (expand "append")
                (("2" (assert)
                  (("2" (rewrite nth_nthList)
                    (("2" (rewrite nth_nthList)
                      (("2" (assert) (("2" (postpone) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (postpone) nil nil))
      nil)
     ("2" (postpone) nil nil) ("3" (postpone) nil nil))
    nil)
   nil shostak))
 (inc_s_TCC1 0
  (inc_s_TCC1-1 nil 3757744453
   ("" (induct i)
    (("1" (skosimp)
      (("1" (expand "running?")
        (("1" (rewrite -1)
          (("1" (rewrite -1)
            (("1" (rewrite -1) (("1" (rewrite inc_ne_stop) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp)
      (("2" (skosimp)
        (("2" (expand "running?")
          (("2" (rewrite -2)
            (("2" (rewrite -2)
              (("2" (rewrite -2)
                (("2" (lemma inc_ne_stop)
                  (("2" (inst -1 "j!1 + 1")
                    (("2" (rewrite -1) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (inc_ne_stop formula-decl nil gotoF nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (running? const-decl "bool" gotoF nil)
    (inc const-decl "[nat -> Transition]" gotoF nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (Command nonempty-type-eq-decl nil gotoF nil)
    (TRUE const-decl "bool" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (Transition type-eq-decl nil gotoF nil)
    (Storage nonempty-type-eq-decl nil gotoF nil)
    (Counter nonempty-type-eq-decl nil gotoF nil)
    (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Gp type-eq-decl nil gotoF nil)
    (Configuration type-eq-decl nil gotoF nil)
    (Commands type-eq-decl nil gotoF nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (inc_s_TCC2 0
  (inc_s_TCC2-1 nil 3757744453
   ("" (induct i)
    (("1" (skosimp) (("1" (postpone) nil nil)) nil)
     ("2" (postpone) nil nil) ("3" (postpone) nil nil))
    nil)
   nil nil))
 (inc_s 0
  (inc_s-2 "without lemma" 3757937672
   ("" (induct i)
    (("1" (skosimp)
      (("1" (expand "execute_step")
        (("1" (rewrite -3)
          (("1" (expand "inc") (("1" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skosimp)
      (("2" (skosimp)
        (("2" (expand "execute_step")
          (("2" (rewrite -4)
            (("2" (hide -1)
              (("2" (expand inc +)
                (("2" (rewrite nth_setStorage) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp)
      (("3" (skosimp)
        (("3" (expand "execute_step")
          (("3" (rewrite -6)
            (("3" (rewrite -3)
              (("3" (expand inc +)
                (("3" (rewrite nth_setStorage) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp)
      (("4" (skosimp)
        (("4" (expand "execute_step")
          (("4" (rewrite -6)
            (("4" (rewrite -3)
              (("4" (expand inc +)
                (("4" (rewrite nth_setStorage) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth_setStorage formula-decl nil gotoF nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nthList def-decl "list[nat]" gotoF nil)
    (expandStorage const-decl "[Storage, nat -> Storage]" gotoF nil)
    (setStorage def-decl "Storage" gotoF nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (getStorage const-decl "[Storage, nat -> nat]" gotoF nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (pred type-eq-decl nil defined_types nil)
    (execute_step const-decl "Gp" gotoF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Commands type-eq-decl nil gotoF nil)
    (Configuration type-eq-decl nil gotoF nil)
    (Gp type-eq-decl nil gotoF nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (Counter nonempty-type-eq-decl nil gotoF nil)
    (Storage nonempty-type-eq-decl nil gotoF nil)
    (Transition type-eq-decl nil gotoF nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (TRUE const-decl "bool" booleans nil)
    (Command nonempty-type-eq-decl nil gotoF nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (inc const-decl "[nat -> Transition]" gotoF nil)
    (running? const-decl "bool" gotoF nil))
   shostak)
  (inc_s-1 nil 3757744454
   ("" (induct i)
    (("1" (skosimp)
      (("1" (expand "execute_step")
        (("1" (rewrite -3)
          (("1" (expand "inc") (("1" (grind) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skosimp)
      (("2" (skosimp)
        (("2" (expand "execute_step")
          (("2" (rewrite -4)
            (("2" (hide -1)
              (("2" (expand inc +) (("2" (rewrite ldv) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp)
      (("3" (skosimp)
        (("3" (expand "execute_step")
          (("3" (rewrite -6)
            (("3" (rewrite -3)
              (("3" (expand inc +) (("3" (rewrite ldv) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp)
      (("4" (skosimp)
        (("4" (expand "execute_step")
          (("4" (rewrite -6)
            (("4" (expand inc +) (("4" (rewrite ldv) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nthList def-decl "list[nat]" gotoF nil)
    (expandStorage const-decl "[Storage, nat -> Storage]" gotoF nil)
    (setStorage def-decl "Storage" gotoF nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (getStorage const-decl "[Storage, nat -> nat]" gotoF nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (pred type-eq-decl nil defined_types nil)
    (execute_step const-decl "Gp" gotoF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Commands type-eq-decl nil gotoF nil)
    (Configuration type-eq-decl nil gotoF nil)
    (Gp type-eq-decl nil gotoF nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (Counter nonempty-type-eq-decl nil gotoF nil)
    (Storage nonempty-type-eq-decl nil gotoF nil)
    (Transition type-eq-decl nil gotoF nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (TRUE const-decl "bool" booleans nil)
    (Command nonempty-type-eq-decl nil gotoF nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (inc const-decl "[nat -> Transition]" gotoF nil)
    (running? const-decl "bool" gotoF nil))
   shostak))
 (dec_s_TCC1 0
  (dec_s_TCC1-1 nil 3757746535 ("" (subtype-tcc) nil nil) nil nil))
 (dec_s_TCC2 0
  (dec_s_TCC2-1 nil 3757746535 ("" (subtype-tcc) nil nil) nil nil))
 (dec_s 0
  (dec_s-1 nil 3757833229
   ("" (induct i)
    (("1" (skosimp)
      (("1" (expand "execute_step")
        (("1" (rewrite -3)
          (("1" (expand "dec") (("1" (rewrite ldv) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skosimp)
      (("2" (skosimp)
        (("2" (expand "execute_step")
          (("2" (rewrite -4)
            (("2" (expand dec +) (("2" (rewrite ldv) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp)
      (("3" (skosimp)
        (("3" (expand "execute_step")
          (("3" (rewrite -6)
            (("3" (rewrite -3)
              (("3" (expand "dec") (("3" (rewrite ldv) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skosimp)
      (("4" (skosimp)
        (("4" (expand "execute_step")
          (("4" (rewrite -6)
            (("4" (expand dec +) (("4" (rewrite ldv) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (getStorage const-decl "[Storage, nat -> nat]" gotoF nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (pred type-eq-decl nil defined_types nil)
    (execute_step const-decl "Gp" gotoF nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Commands type-eq-decl nil gotoF nil)
    (Configuration type-eq-decl nil gotoF nil)
    (Gp type-eq-decl nil gotoF nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (Counter nonempty-type-eq-decl nil gotoF nil)
    (Storage nonempty-type-eq-decl nil gotoF nil)
    (Transition type-eq-decl nil gotoF nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (TRUE const-decl "bool" booleans nil)
    (Command nonempty-type-eq-decl nil gotoF nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (dec const-decl "[nat -> Transition]" gotoF nil)
    (running? const-decl "bool" gotoF nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (goto_s_TCC1 0
  (goto_s_TCC1-1 nil 3757839157 ("" (subtype-tcc) nil nil) nil nil))
 (goto_s 0
  (goto_s-1 nil 3757839159
   ("" (induct i)
    (("1" (skosimp)
      (("1" (expand "execute_step")
        (("1" (rewrite -4)
          (("1" (expand "goto") (("1" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skosimp)
      (("2" (skosimp)
        (("2" (expand "execute_step")
          (("2" (rewrite -5)
            (("2" (expand "goto") (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide 1)
      (("3" (skosimp)
        (("3" (expand "execute_step")
          (("3" (rewrite -4)
            (("3" (expand "goto") (("3" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (execute_step const-decl "Gp" gotoF nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Commands type-eq-decl nil gotoF nil)
    (Configuration type-eq-decl nil gotoF nil)
    (Gp type-eq-decl nil gotoF nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (Counter nonempty-type-eq-decl nil gotoF nil)
    (Storage nonempty-type-eq-decl nil gotoF nil)
    (Transition type-eq-decl nil gotoF nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (TRUE const-decl "bool" booleans nil)
    (Command nonempty-type-eq-decl nil gotoF nil)
    (length def-decl "nat" list_props nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (goto const-decl "[nat -> Transition]" gotoF nil)
    (running? const-decl "bool" gotoF nil))
   shostak))
 (gotoZ_s1_TCC1 0
  (gotoZ_s1_TCC1-1 nil 3757842611 ("" (subtype-tcc) nil nil) nil nil))
 (gotoZ_s1 0
  (gotoZ_s1-1 nil 3757842636
   ("" (skosimp)
    (("" (expand "execute_step")
      (("" (rewrite -5)
        (("" (expand "gotoZ") (("" (rewrite -4) nil nil)) nil)) nil))
      nil))
    nil)
   ((execute_step const-decl "Gp" gotoF nil)
    (gotoZ const-decl "[nat, nat -> Transition]" gotoF nil))
   shostak))
 (gotoZ_s2_TCC1 0
  (gotoZ_s2_TCC1-1 nil 3757843769 ("" (subtype-tcc) nil nil) nil nil))
 (gotoZ_s2 0
  (gotoZ_s2-1 nil 3757843656
   ("" (skosimp)
    (("" (expand "execute_step")
      (("" (rewrite -4)
        (("" (expand "gotoZ") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((execute_step const-decl "Gp" gotoF nil)
    (gotoZ const-decl "[nat, nat -> Transition]" gotoF nil)
    (getStorage const-decl "[Storage, nat -> nat]" gotoF nil)
    (expandStorage const-decl "[Storage, nat -> Storage]" gotoF nil)
    (nthList def-decl "list[nat]" gotoF nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   shostak))
 (add_cmd_TCC1 0
  (add_cmd_TCC1-1 nil 3757505583 ("" (subtype-tcc) nil nil) nil nil))
 (add_gp_TCC1 0
  (add_gp_TCC1-1 nil 3757504441 ("" (subtype-tcc) nil nil) nil nil))
 (add_gen_TCC1 0
  (add_gen_TCC1-1 nil 3757504952 ("" (subtype-tcc) nil nil) nil nil))
 (add_gen_TCC2 0
  (add_gen_TCC2-1 nil 3757609743 ("" (subtype-tcc) nil nil) nil nil))
 (add_gen 0
  (add_gen-2 "" 3757604764
   ("" (induct i)
    (("1" (induct j)
      (("1" (expand "execute")
        (("1" (expand "running?") (("1" (postpone) nil nil)) nil)) nil)
       ("2" (postpone) nil nil) ("3" (postpone) nil nil)
       ("4" (postpone) nil nil))
      nil)
     ("2" (postpone) nil nil) ("3" (postpone) nil nil)
     ("4" (postpone) nil nil))
    nil)
   nil shostak)
  (add_gen-1 nil 3757504953
   ("" (induct i :name "NAT_induction")
    (("1" (skolem!)
      (("1" (flatten)
        (("1" (skolem!)
          (("1" (inst - "j!1")
            (("1" (split)
              (("1" (inst - "j!2") nil nil)
               ("2" (assert) (("2" (postpone) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (postpone) nil nil))
    nil)
   nil shostak)))

