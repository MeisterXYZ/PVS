("gotoFail" gotoF setList_TCC2 0 (setList_TCC2-1 nil 3757492677 ("" (subtype-tcc) nil nil) nil nil))("gotoFail" gotoF setList_TCC1 0 (setList_TCC1-1 nil 3757492677 ("" (subtype-tcc) nil nil) nil nil))("gotoFail" gotoF getStorage_TCC2 0 (getStorage_TCC2-1 nil 3757492677 ("" (subtype-tcc) nil nil) nil nil))("gotoFail" gotoF dec_TCC2 0 (dec_TCC2-1 nil 3757736724 ("" (subtype-tcc) nil nil) nil nil))("gotoFail" gotoF inc_TCC2 0 (inc_TCC2-1 nil 3757736724 ("" (subtype-tcc) nil nil) nil nil))("gotoFail" gotoF inc_TCC1 0 (inc_TCC1-1 nil 3757736724 ("" (subtype-tcc) nil nil) nil nil))("gotoFail" gotoF setStorage_test_TCC1 0 (setStorage_test_TCC1-1 nil 3757736724 ("" (subtype-tcc) nil nil) nil nil))("gotoFail" gotoF setStorage_TCC4 0 (setStorage_TCC4-1 nil 3757736724 ("" (termination-tcc) nil nil) nil nil))("gotoFail" gotoF setStorage_TCC3 0 (setStorage_TCC3-1 nil 3757736724 ("" (subtype-tcc) nil nil) nil nil))("gotoFail" gotoF expandStorage_TCC2 0 (expandStorage_TCC2-1 nil 3757492677 ("" (subtype-tcc) nil nil) nil nil))("gotoFail" gotoF setStorage_test 0 (setStorage_test-1 nil 3757497690 ("" (expand "setStorage") (("" (expand "setList") (("" (propax) nil nil)) nil)) nil) nil shostak))("gotoFail" gotoF nthList_size 0 (nthList_size-1 nil 3757511363 ("" (induct n :name "NAT_induction") (("1" (grind) (("1" (postpone) nil nil)) nil) ("2" (postpone) nil nil)) nil) nil shostak))("gotoFail" gotoF nthList_size_TCC1 0 (nthList_size_TCC1-1 nil 3757511362 ("" (induct n) (("1" (expand "nthList") (("1" (expand "length") (("1" (expand "length") (("1" (assert) nil nil)) nil)) nil)) nil) ("2" (skosimp) (("2" (expand nthList +) (("2" (assert) (("2" (grind) nil nil)) nil)) nil)) nil)) nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (nthList def-decl "list[nat]" gotoF nil) (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil) (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) (length def-decl "nat" list_props nil) (AND const-decl "[bool, bool -> bool]" booleans nil) (every adt-def-decl "boolean" list_adt nil) (PRED type-eq-decl nil defined_types nil) (list type-decl nil list_adt nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil)) nil))