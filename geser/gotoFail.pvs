gotoF: THEORY
BEGIN

%---------------------------------------counter-------
Counter: TYPE+ = [int] CONTAINING 0

%---------------------------------------Storage-------
Storage: Type+ = list[nat] CONTAINING null
empty_storage:Storage = null

%------------------expand Storage
%%expands the Storage to the required size of i items(registers)

nthList(i:nat): RECURSIVE list[nat] =
  IF i = 0 THEN
   null
  ELSE
   cons(0,nthList(i - 1))
  ENDIF
 MEASURE i

%Proofed
nthList_length: FORMULA
   (forall(i:nat): length(nthList(i))=i)

nth_nthList:FORMULA
 FORALL(n:nat): nth(nthList(n+1),n) = 0

%%expandiert den Storage
expandStorage:[Storage, nat -> Storage] = LAMBDA (s:Storage, adress:nat):
 IF length(s) > adress THEN
  s
 ELSE
  append(s,nthList((adress + 1) - length(s)))
 ENDIF

%proofed
append_id1: FORMULA
 FORALL(s:Storage): append(s,null) = s

%proofed
append_id2: FORMULA
 FORALL(s:Storage): append(null,s) = s

%proofed
append_length : FORMULA
 FORALL (s1:Storage, s2:Storage): length(s1) + length(s2) = length(append(s1,s2))

expand_length: FORMULA
 FORALL(s:Storage, adress:nat): adress < length(expandStorage(s,adress))

car_append1: FORMULA
 FORALL(s1:Storage, s2:Storage):length(s1) > 0 IMPLIES car(append(s1,s2)) = car(s1)



%pending
storage:VAR Storage
expand_check: FORMULA
 FORALL(i:nat): (length(storage) < i IMPLIES length(expandStorage(storage,i)) = i )

%------------------getStorage
%%returns Sotrage-List-item (register content) of item(register) i
getStorage: [Storage,nat -> nat] = LAMBDA (s:Storage, adress:nat):
  nth(expandStorage(s, adress), adress)
  
%
null_get: FORMULA
  FORALL(n:nat):getStorage(null, n) = 0


%------------------setStorage

%% Hilfsfunktion um die Liste zu bearbeiten indem eine neue mit modifizierten Werten erstellt und zurÃ¼ckgegeben wird

setStorage(s:Storage, adress:nat, value:nat): RECURSIVE Storage =
LET es = expandStorage(s, adress) in 
  IF adress = 0 THEN
   cons(value,cdr(es))
  ELSE
  cons(car(es),setStorage(cdr(es),adress - 1,value))
  ENDIF
 MEASURE adress

%unprooved
nth_set_Storage:FORMULA
 FORALL(s:Storage, ad:nat, v:nat):
 nth(setStorage(s,ad,v),ad) = v

%-----------------------------------------Command-set-------
%--------------------command-type
Configuration: TYPE = [# storage:Storage, counter:Counter #]
Transition: TYPE = [Configuration -> Configuration]

%---------------inc(x)
inc: [nat -> Transition]= LAMBDA (r:nat) :
 LAMBDA (cf:Configuration):
 LET s = cf`storage IN
   LET x = getStorage(s,r) IN
    (# storage := setStorage(s,r, x+1), counter := cf`counter+1 #)

%---------------dec(x)
dec: [nat -> Transition]= LAMBDA (r:nat) :
 LAMBDA (cf:Configuration):
 LET s = cf`storage IN
   LET x = getStorage(s,r) IN
    (# storage := setStorage(s,r, max(x-1,0)), counter := cf`counter+1 #)

%---------------goto(x)
goto: [nat -> Transition]= LAMBDA (adress:nat):
 LAMBDA(cf:Configuration):
  (# storage := cf`storage, counter:= adress#)

%---------------gotoZ(x,y)
gotoZ: [nat,nat -> Transition]= LAMBDA (reg:nat, adress:nat):
 LAMBDA(cf:Configuration):
  LET s = cf`storage IN
   IF getStorage(s,reg) = 0 THEN
    (# storage := s, counter := adress #)
   ELSE
    (# storage:= s, counter := cf`counter+1#)
   ENDIF

%---------------stop()
stop: Transition = id[Configuration]


%-------------------Set of the commands
Command: TYPE+ = {x : Transition| true} CONTAINING stop

Commands: TYPE = list[Command]

%------------------------------------------GOTO-Program------
Gp: TYPE = [# config:Configuration , cmds:Commands #]

%----------------------- rocket sience -------------------------

IMPORTING orders@closure_ops

computation_step(t: Transition)(cf1, cf2: Configuration): bool =
  t /= stop AND cf2 = t(cf1)

% A goto program is running if the counter is legal and points to a
% command other than "stop"
running?(gp: Gp): bool =
  gp`config`counter >= 0 AND
  gp`config`counter < length(gp`cmds) AND
  nth(gp`cmds, gp`config`counter) /= stop

% execute the next command, provided that it is not the stop command
execute_step(gp: (running?)): Gp =
  (#config := nth(gp`cmds, gp`config`counter)(gp`config), cmds := gp`cmds #)

gp, gp1, gp2: VAR Gp

% step? yields the global computation relation of the goto program gp
step?(gp1, gp2): bool =
  running?(gp1) AND execute_step(gp1) = gp2

% gp2 is reachable from gp, and gp1 follows gp2
%currying
ascends?(gp)(gp1, gp2): bool =
  preorder_closure[Gp](step?)(gp, gp2) AND step?(gp2, gp1)

ascends_propagates: FORMULA
  running?(gp) AND ascends?(execute_step(gp))(gp1, gp2) IMPLIES
  ascends?(gp)(gp1, gp2)

well_founded_stop: FORMULA
  NOT running?(gp) IMPLIES well_founded?(ascends?(gp))

well_founded_propagates: FORMULA
  running?(gp) AND well_founded?(ascends?(gp)) IMPLIES
  well_founded?(ascends?(execute_step(gp)))

execute(gp:Gp | well_founded?[Gp](ascends?(gp))): RECURSIVE Storage =
 IF running?(gp) THEN
  execute((# config := nth(gp`cmds, gp`config`counter)(gp`config),
             cmds := gp`cmds #))
 ELSE
  gp`config`storage
 ENDIF
 MEASURE gp BY ascends?(gp)


%%% ------- LEMMA -------- %%%

inc_ne_stop: LEMMA
 FORALL(i:nat): inc(i) /= stop

dec_ne_stop: LEMMA
 FORALL(i:nat): dec(i) /= stop

%Lemma der verzweiflung
ldv:LEMMA
 FORALL(s:Storage, ad:nat, v:nat):
  nth(setStorage(s,ad,v),ad) = v


%%% ------- Storage-proofs -------- %%%

set_get: FORMULA
 FORALL(s:Storage, adress:nat):
  nth(setStorage(s, adress, 1 + getStorage(s, adress)), adress)
  = getStorage(s,adress) + 1


%%% ------- INC ------- %%%

inc_s: FORMULA
 FORALL(i:nat):
  gp`config`counter >= 0 AND
  gp`config`counter < length[Command](gp`cmds) AND
  nth(gp`cmds,gp`config`counter) = inc(i) IMPLIES
  nth(execute_step(gp)`config`storage,i) = getStorage(gp`config`storage, i) + 1



%%% ------- DEC ------- %%%

dec_s: FORMULA
 FORALL(i:nat):
  gp`config`counter >= 0 AND
  gp`config`counter < length[Command](gp`cmds) AND
  nth(gp`cmds,gp`config`counter) = dec(i) IMPLIES
  nth(execute_step(gp)`config`storage,i) = max(getStorage(gp`config`storage, i) - 1, 0)


%%% ------ ADD ------ %%%

%add_cmd:Commands = cons(gotoZ(1, 4), cons(inc(0), cons(dec(1), cons(goto(0), cons(gotoZ(2,8), cons(inc(0), cons(dec(2), cons(goto(4), cons (stop, null)))))))))

add_cmd:Commands = cons(gotoZ(1,4), cons(inc(0), cons(dec(0), cons(goto(0), cons(stop, null)))))

add_gp: Gp = (#
  config:= (#
   counter := 0,
   storage := cons(0 ,cons(2,cons(3,null)))
  #),
  cmds := add_cmd#)


add_gen:FORMULA
 FORALL(i:nat,j:nat):nth( execute((#
  config:= (#
   counter := 0,
   storage := cons(i ,cons(j,null))
  #),
   cmds := add_cmd #)),0) = i + j

End gotoF
