goto: THEORY 
BEGIN

%---------------------------------------counter-------
Counter: TYPE+ = [int] CONTAINING 0

%---------------------------------------Storage-------
Storage: Type = finite_sequence[nat]
empty_storage:Storage = list2finseq(null)

%------------------expand Storage 
%%expands the Storage to the required size of i items(registers) 


nthList(i:nat): RECURSIVE list[nat] =
  IF i = 0 THEN
   null
  ELSE
   cons(0,nthList(i - 1))
  ENDIF
 MEASURE i


%%expandiert den Storage
expandStorage:[Storage, nat -> Storage] = LAMBDA (s:Storage, (adress:nat | adress > length(s))):
 o(s,list2finseq(nthList(adress - length(s))))


%% TODO: check if this works by using some FORMULAS

%------------------getStorage
%%returns Sotrage-List-item (register content) of item(register) i  
getStorage: [Storage,nat -> nat] = LAMBDA (s:Storage, (adress:nat | adress <= length(s))):
 s`seq(adress)

%% TODO: check if this works by using some FORMULAS   


%------------------setStorage

%% Hilfsfunktion um die Liste zu bearbeiten indem eine neue mit modifizierten Werten erstellt und zurÃ¼ckgegeben wird

%setList: [list[int], int  -> list[int]] = 
% LAMBDA (list:Storage, pos:int, value:int):  
setList(list:Storage, pos:nat, value:nat): RECURSIVE list[nat] = 
  IF pos = 0 THEN
   cons(value,cdr(list))
  ELSE
   cons(car(list),setList(cdr(list),pos - 1,value))
  ENDIF
 MEASURE pos



%% a Storage s, r is the adress
setStorage: [Storage, int, int -> Storage] = 
 LAMBDA (s:Storage, (adress :int | adress <= length(s)), (value:int | value >= 0)):
  LET list = finseq2list(s) IN
   list2finseq(setList(list, adress, value))
   


%% TODO: check if this works by using some FORMULAS    


%-----------------------------------------Command-set-------
%--------------------command-type
Transition: TYPE = [Storage,Counter -> [Storage,Counter]]

%---------------inc(x)
inc: [nat -> Transition]= LAMBDA (r:nat) : 
 LAMBDA (s:Storage, c:Counter):
  IF s`length < r THEN
   LET es = expandStorage(s,r) IN
    LET x = getStorage(es,r) IN
     LET ns = setStorage(es,r,x+1) IN
      (ns, c+1)
  ELSE
   LET x = getStorage(s,r) IN
    LET ns = setStorage(s,r, x+1) IN
     (ns, c+1)
  ENDIF

%---------------dec(x)

%---------------goto(x)

%---------------gotoZ(x,y)

%---------------stop()

stop: Transition = LAMBDA (s:Storage, c:Counter):
  (s,c)

%-------------------Set of the commands
Command: TYPE+ = {x : Transition| true} CONTAINING stop
%-------------------List of Commands = Code of every Goto-Program
Commands: TYPE = list[Command]

%------------------------------------------GOTO-Program------
Gp: TYPE = [# counter:Counter, storage:Storage, cmds:Commands #]


execute(gp:Gp): RECURSIVE Storage = 
 LET cmd = nth(gp`cmds, gp`counter) IN
  IF cmd = stop THEN 
   gp`storage
  ELSE
   LET tres = cmd(gp`storage, gp`counter) IN
    execute((#counter := tres`2, storage:=tres`1, cmds := gp`cmds #))
  ENDIF
 MEASURE gp`counter
 
 inc_gp:Gp = (# counter := 0, storage := empty_storage, cmds := cons( inc(1),
 	     	     	   	      		     	    cons( inc(1),
							     cons( stop , null))) #)


%%%%%%%%%%%------------------------------------------------------PROOFS------------%%%%%%%%

inc_test : FORMULA
 execute(inc_gp)`seq(1) = 2




End goto
