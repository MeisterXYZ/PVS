gotoF: THEORY
BEGIN

%---------------------------------------counter-------
Counter: TYPE+ = [int] CONTAINING 0

%---------------------------------------Storage-------
Storage: Type+ = list[nat] CONTAINING null
empty_storage:Storage = null

%------------------expand Storage
%%expands the Storage to the required size of i items(registers)


nthList(i:nat): RECURSIVE list[nat] =
  IF i = 0 THEN
   null
  ELSE
   cons(0,nthList(i - 1))
  ENDIF
 MEASURE i

%Proofed
nthList_length: FORMULA
   (forall(i:nat): length(nthList(i))=i)

nthList_size: FORMULA
 FORALL(n:nat): nth(cons(0, nthList(n)), n) = 0


%%expandiert den Storage
expandStorage:[Storage, nat -> Storage] = LAMBDA (s:Storage, (adress:nat | adress >= length(s))):
 append(s,nthList(adress - length(s) + 1))

%proofed
append_id: FORMULA
 FORALL(s:Storage): append(s,null) = s

%proofed
append_length : FORMULA
 FORALL (s1:Storage, s2:Storage): length(s1) + length(s2) = length(append(s1,s2))

%pending
storage:VAR Storage
expand_check: FORMULA
 FORALL(i:nat): (length(storage) < i IMPLIES length(expandStorage(storage,i)) = i )



%------------------getStorage
%%returns Sotrage-List-item (register content) of item(register) i
getStorage: [Storage,nat -> nat] = LAMBDA (s:Storage, (adress:nat | adress <= length(s))):
	     nth(s,adress)

%
get_check: FORMULA
  getStorage(cons(3, null),0)=3


%------------------setStorage

%% Hilfsfunktion um die Liste zu bearbeiten indem eine neue mit modifizierten Werten erstellt und zurÃ¼ckgegeben wird

%setList: [list[int], int  -> list[int]] =
% LAMBDA (list:Storage, pos:int, value:int):
setList(list:Storage, pos:nat, value:nat): RECURSIVE list[nat] =
  IF pos = 0 THEN
   cons(value,cdr(list))
  ELSE
   cons(car(list),setList(cdr(list),pos - 1,value))
  ENDIF
 MEASURE pos


setStorage: [Storage, int, int -> Storage] =
 LAMBDA (s:Storage, (adress :int | adress <= length(s)), (value:int | value >= 0)):
   setList(s, adress, value)

%
setStorage_test: FORMULA
  setStorage(cons(0,null),0,42) = cons(42,null)



%-----------------------------------------Command-set-------
%--------------------command-type
Configuration: TYPE = [# storage:Storage, counter:Counter #]
Transition: TYPE = [Configuration -> Configuration]

%---------------inc(x)
inc: [nat -> Transition]= LAMBDA (r:nat) :
 LAMBDA (cf:Configuration):
 LET s = cf`storage IN
  IF length(s) <= r THEN
   LET es = expandStorage(s,r) IN
    LET x = getStorage(es,r) IN
     LET ns = setStorage(es,r,x+1) IN
      (# storage:= ns, counter := cf`counter+1#)
  ELSE
   LET x = getStorage(s,r) IN
    LET ns = setStorage(s,r, x+1) IN
     (# storage := ns, counter := cf`counter+1 #)
  ENDIF

%---------------dec(x)
dec: [nat -> Transition]= LAMBDA (r:nat) :
 LAMBDA (cf:Configuration):
 LET s = cf`storage IN
  IF length(s) <= r THEN
   LET es = expandStorage(s,r) IN
    LET x = getStorage(es,r) IN
     LET ns = setStorage(es,r,max(x-1,0)) IN
      (# storage:= ns, counter := cf`counter+1#)
  ELSE
   LET x = getStorage(s,r) IN
    LET ns = setStorage(s,r, max(x-1,0)) IN
     (# storage := ns, counter := cf`counter+1 #)
  ENDIF

%---------------goto(x)
goto: [nat -> Transition]= LAMBDA (adress:nat):
 LAMBDA(cf:Configuration):
  (# storage := cf`storage, counter:= adress#)

%---------------gotoZ(x,y)
gotoZ: [nat,nat -> Transition]= LAMBDA (reg:nat, adress:nat):
 LAMBDA(cf:Configuration):
  LET s = cf`storage IN
  IF length(s) <= reg THEN
    (# storage:= cf`storage, counter := cf`counter+1#)
  ELSE
   LET x = getStorage(s,reg) IN
    IF x = 0 THEN
     (# storage := cf`storage, counter := adress #)
    ELSE
     (# storage:= cf`storage, counter := cf`counter+1#)
    ENDIF
  ENDIF

%---------------stop()

stop: Transition = id[Configuration]


%-------------------Set of the commands
Command: TYPE+ = {x : Transition| true} CONTAINING stop
%-------------------List of Commands = Code of every Goto-Program
Commands: TYPE = list[Command]

%------------------------------------------GOTO-Program------
Gp: TYPE = [# config:Configuration , cmds:Commands #]

IMPORTING orders@closure_ops

computation_step(t: Transition)(cf1, cf2: Configuration): bool =
  t /= stop AND cf2 = t(cf1)

% A goto program is running if the counter is legal and points to a
% command other than "stop"
running?(gp: Gp): bool =
  gp`config`counter >= 0 AND
  gp`config`counter < length(gp`cmds) AND
  nth(gp`cmds, gp`config`counter) /= stop

% execute the next command, provided that it is not the stop command
execute_step(gp: (running?)): Gp =
  (#config := nth(gp`cmds, gp`config`counter)(gp`config), cmds := gp`cmds #)

gp, gp1, gp2: VAR Gp

% step? yields the global computation relation of the goto program gp
step?(gp1, gp2): bool =
  running?(gp1) AND execute_step(gp1) = gp2

% gp2 is reachable from gp, and gp1 follows gp2
ascends?(gp)(gp1, gp2): bool =
  preorder_closure[Gp](step?)(gp, gp2) AND step?(gp2, gp1)

ascends_propagates: FORMULA
  running?(gp) AND ascends?(execute_step(gp))(gp1, gp2) IMPLIES
  ascends?(gp)(gp1, gp2)

well_founded_stop: FORMULA
  NOT running?(gp) IMPLIES well_founded?(ascends?(gp))

well_founded_propagates: FORMULA
  running?(gp) AND well_founded?(ascends?(gp)) IMPLIES
  well_founded?(ascends?(execute_step(gp)))
  
%step:[Gp -> Configuration] = LAMBDA (gp:Gp):
% LET cmd = nth(gp`cmds, gp`config`counter) IN
%  cmd(gp`config)

stop? (before:Configuration, after:Configuration): bool =
 IF before = after THEN
  TRUE
 ELSE
  FALSE
 ENDIF

execute(gp:Gp | well_founded?[Gp](ascends?(gp))): RECURSIVE Storage =
 IF running?(gp) THEN
  execute((# config := nth(gp`cmds, gp`config`counter)(gp`config),
             cmds := gp`cmds #))
 ELSE
  gp`config`storage
 ENDIF
 MEASURE gp BY ascends?(gp)

%%% ------- INC ------- %%%
 inc_gp:Gp = (#
  config:= (#
   counter := 0,
   storage := empty_storage
  #),
  cmds := cons( inc(1), cons( stop , null)) #)

%proofed
inc_test : FORMULA
 nth(execute(inc_gp),1) = 1

%bringt wahrscheinlich so nichts
inc_all: FORMULA
 FORALL(i:nat):nth( execute((#
  config:= (#
   counter := 0,
   storage := empty_storage
  #),
  cmds := cons( inc(i), cons( stop , null)) #)),i) = 1

%%% ------- DEC ------- %%%

 dec_gp1:Gp = (#
  config:= (#
   counter := 0,
   storage := cons(0, cons(2, null))
  #),
  cmds := cons( dec(1), cons( stop , null)) #)

dec_test1: FORMULA
 nth(execute(dec_gp1),1) = 1

 dec_gp2:Gp = (#
  config:= (#
   counter := 0,
   storage := empty_storage
  #),
  cmds := cons( dec(1), cons( stop , null)) #)

dec_test2: FORMULA
 nth(execute(dec_gp2), 1) = 0



%%% ------ ADD ------ %%%

%add_cmd:Commands = cons(gotoZ(1, 4), cons(inc(0), cons(dec(1), cons(goto(0), cons(gotoZ(2,8), cons(inc(0), cons(dec(2), cons(goto(4), cons (stop, null)))))))))

add_cmd:Commands = cons(gotoZ(1,4), cons(inc(0), cons(dec(0), cons(goto(0), cons(stop, null)))))

add_gp: Gp = (#
  config:= (#
   counter := 0,
   storage := cons(0 ,cons(2,cons(3,null)))
  #),
  cmds := add_cmd#)


add_gen:FORMULA
 FORALL(i:nat,j:nat):nth( execute((#
  config:= (#
   counter := 0,
   storage := cons(i ,cons(j,null))
  #),
   cmds := add_cmd #)),0) = i + j

End gotoF
